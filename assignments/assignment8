/*
 * Project Assignment_8
 * Description: Photon and the Internet of Things
 * Author: Vishal Patel
 * Date: 03/31/18
 */

// Setup MQTT server related funtions and constant numbers
#include <MQTT.h>
#define TEMP_TIME_INCREMENT 120

// Empty MQTT callback function & address and port
void callback(char* topic, byte* payload, unsigned int length)
{
}
MQTT client("guilford.eng.yale.edu", 1883, callback);

// Define global variables
int LEDstate = -1,lightSig,tempInF;

// Define sensor variables
int lightPin = A0;
int tempPin = A1;
int led1 = D6,led2 = D7;

// Define functions
int LEDmode(String command)
{
  if(command == "light")
  {
    LEDstate = 1;
    return LEDstate;
  }
  if(command == "temp")
  {
    LEDstate = 2;
    return LEDstate;
  }
}

void setup() {
  // Default to temperature reading & set time zone
  LEDstate = 2;
  Time.zone(-5);

  // Setup pins
  pinMode(led1, OUTPUT);
  pinMode(led2, OUTPUT);

  // Define Particle variables
  Particle.variable("temperature",tempInF);
  Particle.variable("lightValue",lightSig);

  // Define Particle Functions
  Particle.function("setLEDmode", LEDmode);

  ///Serial.begin(9600);
}

void loop() {
  // Declare variables for use in loop
  int offTime = 1000,sOffTime = 250,lastTempUpdate=0;
  double voltage,tempSig,tempInC,value,decimal,ones;

  // Collect signal
  lightSig = analogRead(lightPin);
  tempSig = analogRead(tempPin);

  // Convert to degrees F
  voltage = (tempSig * 3.3) / 4095.;
  tempInC = (voltage - .5) * 100;
  tempInF = ((tempInC * 9) / 5.) + 32.;

  // Send values to MQTT every 2 minutes
  if((millis() - lastTempUpdate) > (TEMP_TIME_INCREMENT * 1000))
  {
    if (client.isConnected())
    {
       client.loop();
    }
    else
    {
       client.connect("particleClient");
    }
    if (client.isConnected())
    {
        String topic = "/130/sensors";
        String payload = String(tempInF) + ", " + String(Time.now()) + ", " + String(lightSig) + ", " + "'patelv'";
        client.publish(topic,payload);
        Serial.println(payload);
    }
    lastTempUpdate = millis();
  }

  // Blink to signal last digit before decimal of temperature in F
  if(LEDstate == 2)
  {
    // Isolate last digit of temp in F
    offTime = 3000;
    value = tempInF;
    while(value >= 10)
    {
      value -= 10;
    }
    decimal = value;
    while(decimal >= 1)
    {
      decimal -= 1;
    }
    ones = value - decimal;

    // Blink lights corresponding to last digit before decimal
    while(ones > 0)
    {
      ones -= 1;
      digitalWrite(led1, HIGH);
      digitalWrite(led2, HIGH);
      delay(sOffTime);
      digitalWrite(led1, LOW);
      digitalWrite(led2, LOW);
      delay(sOffTime);
    }
    delay(offTime);
  }

  // Blink at inversely proportion rate to light signal when in light mode
  if(LEDstate == 1)
  {
    offTime = (4000000/lightSig);
    digitalWrite(led1, HIGH);
    digitalWrite(led2, HIGH);
    delay(offTime);
    digitalWrite(led1, LOW);
    digitalWrite(led2, LOW);
    delay(offTime);
  }
}
